âœ… Â¿Por quÃ© usar el patrÃ³n Adapter?
La clase HomeWeatherStation ya existe y no se puede modificar, pero se espera que trabaje con una interfaz WeatherData. Como esta clase ya implementa los mismos mÃ©todos de la interfaz, pero devuelve los datos en Fahrenheit y queremos poder trabajar tambiÃ©n en Celsius, necesitamos adaptarla.

ğŸŒŸ Objetivo:
Poder usar una clase existente (HomeWeatherStation) como si devolviera temperatura en grados Celsius u otro formato sin modificar su implementaciÃ³n.

ğŸ§± Participantes del patrÃ³n Adapter:
Rol	Clase	FunciÃ³n
Target	WeatherData	Interfaz esperada por los clientes
Adaptee	HomeWeatherStation	Clase que ya existe y que hay que adaptar
Adapter	CelsiusAdapter	Adapta HomeWeatherStation para devolver en Â°C

ğŸ§  Idea:
CelsiusAdapter implementa WeatherData, tiene una instancia de HomeWeatherStation y adapta la respuesta de getTemperatura() (transforma de Â°F a Â°C).

âœ… Â¿Por quÃ© usar el patrÃ³n Decorator?
Una vez que tenemos la temperatura en el formato deseado (gracias al Adapter), el usuario puede querer ver datos adicionales como promedio, mÃ­nimo, mÃ¡ximo, etc. Esos comportamientos deben agregarse dinÃ¡micamente, segÃºn la configuraciÃ³n, y sin romper el principio de cerrado-abierto (Open/Closed).

ğŸŒŸ Objetivo:
Agregar funcionalidades de manera flexible a WeatherData (como mÃ­nimo, mÃ¡ximo, promedio) sin alterar las clases existentes.

ğŸ§± Participantes del patrÃ³n Decorator:
Rol	Clase	FunciÃ³n
Component	WeatherData	Interfaz comÃºn para todos los objetos que se pueden decorar
ConcreteComponent	HomeWeatherStation, CelsiusAdapter	ImplementaciÃ³n base de los datos
Decorator	WeatherDecorator	Clase abstracta que implementa WeatherData y decora
ConcreteDecorator	MinimaDecorator, MaximaDecorator, PromedioDecorator	Agregan comportamiento especÃ­fico (mÃ­nimo, mÃ¡ximo, promedio)